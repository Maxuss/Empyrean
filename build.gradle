import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
  	id "org.jetbrains.kotlin.jvm" version "1.9.0"
	id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.0'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url 'https://maven.wispforest.io' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven { url 'https://maven.ladysnake.org/releases' }
	maven { url 'https://maven.terraformersmc.com/' }
	maven { url "https://maven.isxander.dev/releases" }
	maven { url "https://maven.parchmentmc.org" }
	maven { url "https://maven.shedaniel.me/" }
}

loom {
	splitEnvironmentSourceSets()
	accessWidenerPath = file("src/main/resources/empyrean.accesswidener")

	mods {
		"empyrean" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
    runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=empyrean"
 
			runDir "build/datagen"
		}
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {
	// Minecraft
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
//		"net.fabricmc:yarn:${project.yarn_mappings}:v2"
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_version}")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// owo lib
	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
	annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	// kotlinx.serialization
	modImplementation include('org.jetbrains.kotlinx:kotlinx-serialization-core:1.5.1')

	// Trinkets
	modImplementation "dev.emi:trinkets:${trinkets_version}"

	// Cardinal Components
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_version}")

	// Config + ModMenu integration
	modApi "dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}"
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

	// REI integration
	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version"

	// Fabric
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release.set(17)
	it.options.annotationProcessorPath = configurations.annotationProcessor
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}